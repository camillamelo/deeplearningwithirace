install.packages("irace")
library("irace")
load("C:/Users/cammy/OneDrive/mestrado/pesquisa/irace/mnist-irace/irace/irace-run.R")
load("C:/Users/cammy/OneDrive/mestrado/pesquisa/irace/mnist-irace/irace/irace.Rdata")
View(iraceResults)
View(iraceResults)
iraceResults[["scenario"]][["instances"]]
View(iraceResults[["allConfigurations"]])
iraceResults[["scenario"]][["instances"]]
View(iraceResults[["state"]][["eliteConfigurations"]])
library("irace")
?irace2pyimp
irace2pyimp(file = "C:/Users/cammy/OneDrive/mestrado/pesquisa/irace/mnist-irace/irace/irace.Rdata", normalise = "none",
outdir = "C:/Users/cammy/OneDrive/mestrado/pesquisa/irace/mnist-irace/irace/pyimp-input/", instanceFeatureFile = NA,
filterConditions = NA, defaultConfigurationID = 1,
ignoreUnsupported = 0)
install.packages("irace")
install.packages("irace")
library("irace")
?irace2pyimp
irace2pyimp(file = "C:/Users/cammy/OneDrive/mestrado/pesquisa/irace/mnist-irace/irace/irace.Rdata", normalise = "none",
outdir = "C:/Users/cammy/OneDrive/mestrado/pesquisa/irace/mnist-irace/irace/pyimp-input/", instanceFeatureFile = NA,
filterConditions = NA, defaultConfigurationID = 1,
ignoreUnsupported = 0)
install.packages("irace2pyimp")
install.packages("irace")
load("C:/Users/cammy/OneDrive/mestrado/pesquisa/irace/mnist-irace/irace/irace.Rdata")
load("C:/Users/cammy/OneDrive/mestrado/pesquisa/irace/mnist-irace/irace/irace.Rdata")
iraceResults$irace.version
head(iraceResults$allConfigurations)
print(iraceResults$allElites)
getFinalElites("C:/Users/cammy/OneDrive/mestrado/pesquisa/irace/mnist-irace/irace/irace.Rdata", n = 0)
View(iraceResults)
print(iraceResults$iterationElites)
last <- length(iraceResults$iterationElites)
id <- iraceResults$iterationElites[last]
getConfigurationById(iraceResults, ids = id)
getConfigurationById(iraceResults, ids = 86)
# As an example, we use the best configuration found
best.config <- getFinalElites(iraceResults = iraceResults, n = 1)
id <- best.config$.ID.
# Obtain the configurations using the identifier
# of the best configuration
all.exp <- iraceResults$experiments[,as.character(id)]
all.exp[!is.na(all.exp)]
# As an example, we get seed and instance of the experiments
# of the best candidate.
# Get index of the instances
pair.id <- which(!is.na(all.exp))
index <- iraceResults$state$.irace$instancesList[pair.id, "instance"]
# Obtain the instance names
iraceResults$scenario$instances[index]
iraceResults$state$model["layerSize"]
iraceResults$testing$experiments
results <- iraceResults$experiments
# Wilcoxon paired test
conf <- gl(ncol(results), # number of configurations
nrow(results), # number of instances
labels = colnames(results))
pairwise.wilcox.test (as.vector(results), conf, paired = TRUE, p.adj = "bonf")
irace:::concordance(results)
# Get number of iterations
iters <- unique(iraceResults$experimentLog[, "iteration"])
# Get number of experiments (runs of target-runner) up to each iteration
fes <- cumsum(table(iraceResults$experimentLog[,"iteration"]))
# Get the mean value of all experiments executed up to each iteration
# for the best configuration of that iteration.
elites <- as.character(iraceResults$iterationElites)
values <- colMeans(iraceResults$experiments[, elites])
stderr <- function(x) sqrt(var(x)/length(x))
err <- apply(iraceResults$experiments[, elites], 2, stderr)
plot(fes, values, type = "s",
xlab = "Number of runs of the target algorithm",
ylab = "Mean value over testing set", ylim=c(23000000,23500000))
points(fes, values, pch=19)
arrows(fes, values - err, fes, values + err, length=0.05, angle=90, code=3)
text(fes, values, elites, pos = 1)
ablog <- ablation("C:/Users/cammy/OneDrive/mestrado/pesquisa/irace/mnist-irace/irace/irace.Rdata")
plotAblation(ablog)
View(results)
iraceResults[["experiments"]]
iraceResults[["experimentLog"]]
iraceResults[["iterationElites"]]
library('irace')
setwd("C:/Users/cammy/OneDrive/mestrado/pesquisa/irace/cifar10-irace - exp2/irace")
library('tidyverse')
load("irace.Rdata")
head(iraceResults$allConfigurations)
print(iraceResults$allElites)
print(iraceResults$iterationElites)
last <- length(iraceResults$iterationElites)
id <- iraceResults$iterationElites[last]
getConfigurationById(iraceResults, ids = id)
# As an example, we use the best configuration found
best.config <- getFinalElites(iraceResults = iraceResults, n = 6)
id <- best.config$.ID.
# Obtain the configurations using the identifier
# of the best configuration
all.exp <- iraceResults$experiments[,as.character(id)]
View(all.exp)
all.exp[!is.na(all.exp)]
# As an example, we get seed and instance of the experiments
# of the best candidate.
# Get index of the instances
pair.id <- which(!is.na(all.exp))
index <- iraceResults$state$.irace$instancesList[pair.id, "instance"]
#Ver um parâmetro específico das elites
iraceResults$state$model["camadasConvolucionais"]
results <- iraceResults$experiments
View(results)
# Wilcoxon paired test
conf <- gl(ncol(results), # number of configurations
nrow(results), # number of instances
labels = colnames(results))
pairwise.wilcox.test (as.vector(results), conf, paired = TRUE, p.adj = "bonf")
irace:::concordance(results)
# Mesmo para a elite
# Wilcoxon paired test
conf <- gl(ncol(all.exp), # number of configurations
nrow(all.exp), # number of instances
labels = colnames(all.exp))
pairwise.wilcox.test (as.vector(all.exp), conf, paired = TRUE, p.adj = "bonf")
irace:::concordance(all.exp)
#plot
# Get number of iterations
iters <- unique(iraceResults$experimentLog[, "iteration"])
# Get number of experiments (runs of target-runner) up to each iteration
fes <- cumsum(table(iraceResults$experimentLog[,"iteration"]))
# Get the mean value of all experiments executed up to each iteration
# for the best configuration of that iteration.
elites <- as.character(iraceResults$iterationElites)
values <- colMeans(iraceResults$experiments[, elites])
stderr <- function(x) sqrt(var(x)/length(x))
err <- apply(iraceResults$experiments[, elites], 2, stderr)
plot(fes, values, type = "s",
xlab = "Number of runs of the target algorithm",
ylab = "Mean value over testing set")
#ylab = "Mean value over testing set", ylim=c(23000000,23500000))
points(fes, values, pch=19)
arrows(fes, values - err, fes, values + err, length=0.05, angle=90, code=3)
text(fes, values, elites, pos = 1)
allConfs = iraceResults$allConfigurations
View(allConfs)
logs = iraceResults$experimentLog
summary(logs[time])
View(logs)
write.csv(results, "results.csv", sep=";")
write.csv(best.config, "bestconfig.csv")
write.csv(allConfs, "allconfig.csv")
write.csv(logs, "logs.csv")
